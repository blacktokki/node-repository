{"version":3,"sources":["hooks/useColorScheme.ts","screens/NotFoundScreen.tsx","constants/Colors.ts","components/DraggableFlatList.web.tsx","components/DraggableFlatListMain.tsx","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","components/SectionDummy.tsx","navigation/DrawerNavigator.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","Results","SortableContainer","props","useState","data","length","dataLength","setDataLength","ref","useRef","useEffect","last","setTimeout","current","scrollToEnd","FlatList","renderItem","scrollEnabled","keyExtractor","item","index","toString","removeClippedSubviews","windowSize","Math","floor","ListFooterComponent","Element","SortableElement","children","DraggableFlatList","setData","setLast","cacheItem","useCallback","isActive","key","add","undefined","addElement","_data","map","splice","dataCallback","height","onSortEnd","newIndex","oldIndex","distance","sortEnabled","Button","addTitle","drag","marginRight","Platform","OS","onLongPress","renderItemUnsort","DraggableFlatListMain","headerHeight","useHeaderHeight","React","Children","toArray","_sortEnabled","Dimensions","get","useThemeColor","colorName","theme","colorFromProps","Colors","lightColor","darkColor","otherProps","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","lineHeight","textAlign","SectionDummy","onPress1","pressText1","separator","width","Drawer","createDrawerNavigator","DrawerNavigator","colorScheme","Navigator","initialRouteName","screenOptions","drawerContentOptions","activeTintColor","Navigators","DrawerNavigatorGeneric","drawerName","name","component","headerTitle","Screen","StackNavigatorGeneric","options","drawerIcon","TabBarIcon","Ionicons","size","marginBottom","TabStack","createStackNavigator","headerLeft","openDrawer","navigate","console","log","arr","i","prefixes","Linking","config","screens","Root","TabOne","TabOneScreen","TabTwo","TabTwoScreen","NotFound","Navigation","NavigationContainer","linking","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","headerShown","ignoreWarnings","_console","_","clone","App","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","font","require","warn","useCachedResources","StatusBar","message","forEach","value","indexOf","module","exports"],"mappings":"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","file":"static/js/app.783cbd44.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import React, { useState, useCallback, useRef, useEffect, MutableRefObject } from \"react\";\nimport { View, FlatList, Button } from \"react-native\";\nimport {SortableContainer, SortableElement, SortEnd} from 'react-sortable-hoc';\n\nconst Results = SortableContainer((props:any) => {\n    const [dataLength, setDataLength] = useState(props.data.length)\n    const ref = useRef<FlatList>(null)\n    useEffect(()=>{\n      if (dataLength != props.data.length){\n        if (props.last == props.data.length){\n          setTimeout(() =>{ref.current?.scrollToEnd()}, 0.5 * props.data.length)\n        }\n        setDataLength(props.data.length)\n      }\n    });\n    return(\n      <FlatList\n        ref={ref}\n        renderItem={props.renderItem}\n        data={props.data}\n        scrollEnabled={props.scrollEnabled}\n        keyExtractor={(item, index) => index.toString()}\n        removeClippedSubviews={true}\n        windowSize={Math.floor(props.data.length / 2)}\n        ListFooterComponent={props.ListFooterComponent}\n        //contentContainerStyle={{\n        //    flexGrow: 1\n        //}}\n      />\n    )\n  });\n\nconst Element = SortableElement((props:any) => {\n    return props.children\n});\n\nexport type RenderItemParams<T> = {\n  item:T,\n  index:number\n}\n\ntype Props<T> = {\n  data:T[],\n  dataCallback:(data:T[])=>void,\n  scrollEnabled?:boolean,\n  sortEnabled:boolean,\n  renderItem:(params:RenderItemParams<T>)=>React.ReactNode,\n  height:number,\n  keyExtractor:(item:T, index:number)=>string,\n  addTitle:string | undefined,\n  addElement?: (data:T[])=> T\n}\n\nfunction DraggableFlatList<T>(props:Props<T>) {\n  const [data, setData] = useState(props.data);\n  const [last, setLast] = useState(props.data.length)\n  const cacheItem = useRef<{[index: number]:[T, React.ReactNode]}>({}) \n  const renderItem = useCallback(\n    ({item, index, isActive}) => {\n      if (index in cacheItem.current && cacheItem.current[index][0] == item)\n        return cacheItem.current[index][1]\n        cacheItem.current[index] = [item, (<Element key = {index} index={index}>\n        {props.renderItem({item:item, index:index})}\n      </Element>)]\n      return cacheItem.current[index][1]\n  },\n    []\n  );\n  const add = useCallback((data, last) => {\n    if (props.addElement !== undefined){\n      const _data = data.map((item:T)=>item);\n      _data.splice(_data.length, 0, props.addElement(data));\n      setData(_data)\n      props.dataCallback(_data)\n      setLast(_data.length)\n    }\n  }, [data, last])\n  return (\n    <View style={{ height:props.height }}>\n      <Results\n        data={data}\n        renderItem={renderItem}\n        keyExtractor={props.keyExtractor}\n        onSortEnd={({newIndex, oldIndex}:SortEnd) => {if (newIndex!=oldIndex){const _data = data.map((item:T)=>item); _data.splice(newIndex, 0, _data.splice(oldIndex, 1)[0]); setData(_data); props.dataCallback(_data)}}}\n        distance={props.sortEnabled ? 5 : 99999}\n        scrollEnabled={props.scrollEnabled}\n        ListFooterComponent={<Button\n          onPress={()=>add(data, last)}\n          title={props.addTitle || \"\"}\n          color=\"#888\"\n        />}\n    last={last}\n  />\n    </View>\n  );\n}\n\nexport default DraggableFlatList;","\nimport React, {useCallback, useRef} from \"react\";\nimport { View, TouchableOpacity, Dimensions, Platform } from \"react-native\";\nimport { useHeaderHeight } from '@react-navigation/stack';\nimport DraggableFlatList, {RenderItemParams} from './DraggableFlatList'\n\nconst renderItem = ({ item, index, drag, isActive }:RenderItemParams<React.ReactNode>) => {\n    return (\n        <TouchableOpacity\n        style={{\n          backgroundColor: isActive ? \"red\" : \"white\",\n          marginRight: Platform.OS == 'web'? 0 : 5,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n        onLongPress={drag}\n      >\n        {item}\n    </TouchableOpacity>\n    )\n}\nconst renderItemUnsort = ({ item, index, drag, isActive }:RenderItemParams<React.ReactNode>) => {\n  return (\n    <View\n      style={{\n        marginRight: 5,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      {item}\n    </View>\n  )\n}\ntype Props = {\n  children: React.ReactNode,\n  scrollEnabled?: boolean, \n  sortEnabled?: boolean, \n  addTitle?: string, \n  addElement?:(data:React.ReactNode[])=>React.ReactNode,\n  dataCallback:(data:React.ReactNode[])=>void\n}\n\nexport default function DraggableFlatListMain(props:Props){\n    const headerHeight = useHeaderHeight();\n    let _data = React.Children.toArray(props.children)\n    let _sortEnabled = (props.sortEnabled === undefined ? true : props.sortEnabled)\n    return (<DraggableFlatList<React.ReactNode>\n        sortEnabled={_sortEnabled}\n        scrollEnabled={props.scrollEnabled}\n        height={Dimensions.get(\"window\").height - headerHeight}\n        data={_data}\n        dataCallback={props.dataCallback}\n        renderItem={_sortEnabled ? renderItem : renderItemUnsort}\n        keyExtractor={(item:React.ReactNode, index:number) => `main-draggable-item-${index}`}\n        addElement={props.addElement}\n        addTitle={props.addTitle}\n    />)\n}","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { Text, View } from '../components/Themed';\nimport { StyleSheet, TouchableOpacity, GestureResponderEvent } from 'react-native';\nimport EditScreenInfo from '../components/EditScreenInfo';\n\ntype SectionDummyParamList = {\n    title: string,\n    pressText1: string,\n    onPress1:(event: GestureResponderEvent)=>void,\n    path: string\n}\n\nexport default function SectionDummy(props:SectionDummyParamList){\n  return (\n        <View style={styles.container}>\n            <TouchableOpacity onPress={props.onPress1} style={styles.link}>\n            <Text style={styles.linkText}>{props.pressText1}</Text>\n            </TouchableOpacity>\n            <Text style={styles.title}>{props.title}</Text>\n            <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n            <EditScreenInfo path={props.path} />\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    title: {\n      fontSize: 20,\n      fontWeight: 'bold',\n    },\n    separator: {\n      marginVertical: 30,\n      height: 1,\n      width: '80%',\n    },\n    link: {\n      marginTop: 15,\n      paddingVertical: 15,\n    },\n    linkText: {\n      fontSize: 14,\n      color: '#2e78b7',\n    },\n  });\n  ","/**\n * Learn more about createDrawerNavigator:\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\n\nimport { Ionicons } from '@expo/vector-icons';\nimport { DrawerScreenProps, createDrawerNavigator } from '@react-navigation/drawer';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { ParamListBase, Route } from '@react-navigation/native'; \nimport * as React from 'react';\nimport { Button } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { DrawerParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst Drawer = createDrawerNavigator<DrawerParamList>();\n\nexport default function DrawerNavigator() {\n  const colorScheme = useColorScheme();\n  //  drawerActiveTintColor: Colors[colorScheme].tint\n  return (\n    <Drawer.Navigator\n      initialRouteName={initialRouteName}\n      screenOptions={{ }}\n      drawerContentOptions={{activeTintColor: Colors[colorScheme].tint }}\n    >\n      {Navigators}\n    </Drawer.Navigator>\n  );\n}\n\nfunction DrawerNavigatorGeneric<ParamList extends Record<string, object | undefined>>(drawerName:keyof DrawerParamList, name: keyof ParamList, component:React.ComponentType<any>, headerTitle:string){\n  return (\n    <Drawer.Screen\n      key={drawerName}\n      name={drawerName}\n      component={StackNavigatorGeneric<ParamList, typeof drawerName>(name, component, headerTitle)}\n      options={{\n        drawerIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n      }}\n    />\n  )\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nfunction StackNavigatorGeneric<ParamList extends Record<string, object | undefined>, RouteName extends keyof DrawerParamList>(name:keyof ParamList, component:React.ComponentType<any>, headerTitle:string){\n  const TabStack = createStackNavigator<ParamList>();\n  function TabNavigator({navigation}: DrawerScreenProps<DrawerParamList, RouteName>) {\n    return (\n      <TabStack.Navigator>\n        <TabStack.Screen\n          name={name}\n          component={component}\n          options={{\n            headerTitle: headerTitle,\n            headerLeft: () => (\n              <Button\n                onPress={() => navigation.openDrawer()}\n                title=\"Menu\"\n                color=\"#888\"\n              />\n            ),\n          }}\n        />\n      </TabStack.Navigator>\n    );\n  }\n  return TabNavigator\n\n}\nconst initialRouteName = \"TabOne\"\n\n\nconst Navigators = [\n  DrawerNavigatorGeneric<TabOneParamList>(\"TabOne\", \"TabOneScreen\", TabOneScreen, 'Tab One Title'),\n  DrawerNavigatorGeneric<TabTwoParamList>(\"TabTwo\", \"TabTwoScreen\", TabTwoScreen, 'Tab Two Title')\n]\n","import React, {useCallback, useRef} from 'react';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport {  DrawerParamList } from '../types';\nimport DraggableFlatListMain from '../components/DraggableFlatListMain'\nimport SectionDummy from '../components/SectionDummy'\n\n\nexport default function TabOneScreen({\n  navigation\n}: StackScreenProps< DrawerParamList, 'TabOne'>) {\n  const ref= useRef<typeof DraggableFlatListMain>(null)\n  const addElement = useCallback((data:React.ReactNode[])=>{\n    return (\n     <SectionDummy\n        title={'Tab One' + (data.length + 1)}\n        pressText1='Go 2 screen!'\n        onPress1={() => {navigation.navigate('TabTwo')}}\n       path='/screens/TabOneScreen.tsx'\n      />)\n  },[])\n  const dataCallback = useCallback((data)=>{console.log('!')}, [])\n\n  const arr = []\n  for (let i=0;i<100;i++){\n    arr[i] = <SectionDummy\n    key={i}\n    title={'Tab One' + (i+1)}\n    pressText1='Go 2 screen!'\n    onPress1={() => {navigation.navigate('TabTwo')}}\n    path='/screens/TabOneScreen.tsx'\n  />\n  }\n  return (\n    <DraggableFlatListMain\n      addElement={addElement}\n      dataCallback={dataCallback}\n      addTitle=\"add\"\n    >\n      {arr}\n    </DraggableFlatListMain>\n  );\n}\n","import * as React from 'react';\nimport { StackScreenProps } from '@react-navigation/stack';\nimport {  DrawerParamList} from '../types';\nimport DraggableFlatListDummy from '../components/DraggableFlatListDummy'\nimport DraggableFlatListMain from '../components/DraggableFlatListMain'\nimport SectionDummy from '../components/SectionDummy'\n\nexport default function TabTwoScreen({\n  navigation\n}: StackScreenProps< DrawerParamList, 'TabOne'>) {\n  //return (<DraggableFlatListDummy/>)\n  return (\n    <DraggableFlatListMain \n      sortEnabled={false}\n      dataCallback={()=>{}}\n    >\n      <SectionDummy\n        title='Tab Two'\n        pressText1='Go 1 screen!'\n        onPress1={() => {navigation.navigate('TabOne')}}\n        path='/screens/TabTwoScreen.tsx'\n      />\n      <SectionDummy\n        title='Tab Two'\n        pressText1='Go 1 screen!'\n        onPress1={() => {navigation.navigate('TabOne')}}\n        path='/screens/TabTwoScreen.tsx'\n      />\n    </DraggableFlatListMain>\n  );\n}","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","/**\n * If you are not familiar with React Navigation, check out the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport DrawerNavigator from './DrawerNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={DrawerNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\nimport _ from 'lodash';\n\nconst ignoreWarnings = ['ReactNativeFiberHostComponent'];\nconst _console = _.clone(console);\nconsole.warn = (message: string) => {\n    var warn = true;\n    ignoreWarnings.forEach((value)=>{\n        if (message.indexOf(value) <= -1) {\n            warn = false;\n        }\n    });\n    if (warn){\n        _console.warn(message);\n    }\n    else{\n        // console.log(message)\n    }\n};\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}
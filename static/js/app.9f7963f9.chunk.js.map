{"version":3,"sources":["hooks/useColorScheme.ts","screens/NotFoundScreen.tsx","constants/Colors.ts","components/DraggableFlatList.web.tsx","components/DraggableFlatListMain.tsx","components/Themed.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","components/SectionDummy.tsx","navigation/DrawerNavigator.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","Results","SortableContainer","props","useState","data","length","dataLength","setDataLength","ref","useRef","useEffect","last","setTimeout","current","scrollToEnd","FlatList","renderItem","scrollEnabled","keyExtractor","item","index","toString","removeClippedSubviews","windowSize","Math","floor","ListFooterComponent","Element","SortableElement","children","DraggableFlatList","setData","setLast","cacheItem","useCallback","isActive","key","add","undefined","addElement","_data","map","splice","dataCallback","height","onSortEnd","newIndex","oldIndex","distance","sortEnabled","Button","addTitle","drag","marginRight","Platform","OS","onLongPress","renderItemUnsort","DraggableFlatListMain","headerHeight","useHeaderHeight","React","Children","toArray","_sortEnabled","Dimensions","get","useThemeColor","colorName","theme","colorFromProps","Colors","lightColor","darkColor","otherProps","MonoText","fontFamily","EditScreenInfo","path","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","lineHeight","textAlign","SectionDummy","onPress1","pressText1","separator","width","Drawer","createDrawerNavigator","DrawerNavigator","colorScheme","Navigator","initialRouteName","screenOptions","drawerContentOptions","activeTintColor","Navigators","DrawerNavigatorGeneric","drawerName","name","component","headerTitle","Screen","StackNavigatorGeneric","options","drawerIcon","TabBarIcon","Ionicons","size","marginBottom","TabStack","createStackNavigator","headerLeft","openDrawer","navigate","console","log","arr","i","_package","require","prefixes","Linking","config","screens","Root","homepage","split","TabOne","TabOneScreen","TabTwo","TabTwoScreen","NotFound","Navigation","NavigationContainer","linking","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","headerShown","l","alert","search","decoded","slice","s","join","window","history","replaceState","pathname","hash","location","ignoreWarnings","_console","_","clone","App","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","font","warn","useCachedResources","StatusBar","message","forEach","value","indexOf","module","exports"],"mappings":"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","file":"static/js/app.9f7963f9.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import React, { useState, useCallback, useRef, useEffect, MutableRefObject } from \"react\";\r\nimport { View, FlatList, Button } from \"react-native\";\r\nimport {SortableContainer, SortableElement, SortEnd} from 'react-sortable-hoc';\r\n\r\nconst Results = SortableContainer((props:any) => {\r\n    const [dataLength, setDataLength] = useState(props.data.length)\r\n    const ref = useRef<FlatList>(null)\r\n    useEffect(()=>{\r\n      if (dataLength != props.data.length){\r\n        if (props.last == props.data.length){\r\n          setTimeout(() =>{ref.current?.scrollToEnd()}, 0.5 * props.data.length)\r\n        }\r\n        setDataLength(props.data.length)\r\n      }\r\n    });\r\n    return(\r\n      <FlatList\r\n        ref={ref}\r\n        renderItem={props.renderItem}\r\n        data={props.data}\r\n        scrollEnabled={props.scrollEnabled}\r\n        keyExtractor={(item, index) => index.toString()}\r\n        removeClippedSubviews={true}\r\n        windowSize={Math.floor(props.data.length / 2)}\r\n        ListFooterComponent={props.ListFooterComponent}\r\n        //contentContainerStyle={{\r\n        //    flexGrow: 1\r\n        //}}\r\n      />\r\n    )\r\n  });\r\n\r\nconst Element = SortableElement((props:any) => {\r\n    return props.children\r\n});\r\n\r\nexport type RenderItemParams<T> = {\r\n  item:T,\r\n  index:number\r\n}\r\n\r\ntype Props<T> = {\r\n  data:T[],\r\n  dataCallback:(data:T[])=>void,\r\n  scrollEnabled?:boolean,\r\n  sortEnabled:boolean,\r\n  renderItem:(params:RenderItemParams<T>)=>React.ReactNode,\r\n  height:number,\r\n  keyExtractor:(item:T, index:number)=>string,\r\n  addTitle:string | undefined,\r\n  addElement?: (data:T[])=> T\r\n}\r\n\r\nfunction DraggableFlatList<T>(props:Props<T>) {\r\n  const [data, setData] = useState(props.data);\r\n  const [last, setLast] = useState(props.data.length)\r\n  const cacheItem = useRef<{[index: number]:[T, React.ReactNode]}>({}) \r\n  const renderItem = useCallback(\r\n    ({item, index, isActive}) => {\r\n      if (index in cacheItem.current && cacheItem.current[index][0] == item)\r\n        return cacheItem.current[index][1]\r\n        cacheItem.current[index] = [item, (<Element key = {index} index={index}>\r\n        {props.renderItem({item:item, index:index})}\r\n      </Element>)]\r\n      return cacheItem.current[index][1]\r\n  },\r\n    []\r\n  );\r\n  const add = useCallback((data, last) => {\r\n    if (props.addElement !== undefined){\r\n      const _data = data.map((item:T)=>item);\r\n      _data.splice(_data.length, 0, props.addElement(data));\r\n      setData(_data)\r\n      props.dataCallback(_data)\r\n      setLast(_data.length)\r\n    }\r\n  }, [data, last])\r\n  return (\r\n    <View style={{ height:props.height }}>\r\n      <Results\r\n        data={data}\r\n        renderItem={renderItem}\r\n        keyExtractor={props.keyExtractor}\r\n        onSortEnd={({newIndex, oldIndex}:SortEnd) => {if (newIndex!=oldIndex){const _data = data.map((item:T)=>item); _data.splice(newIndex, 0, _data.splice(oldIndex, 1)[0]); setData(_data); props.dataCallback(_data)}}}\r\n        distance={props.sortEnabled ? 5 : 99999}\r\n        scrollEnabled={props.scrollEnabled}\r\n        ListFooterComponent={<Button\r\n          onPress={()=>add(data, last)}\r\n          title={props.addTitle || \"\"}\r\n          color=\"#888\"\r\n        />}\r\n    last={last}\r\n  />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default DraggableFlatList;","\r\nimport React, {useCallback, useRef} from \"react\";\r\nimport { View, TouchableOpacity, Dimensions, Platform } from \"react-native\";\r\nimport { useHeaderHeight } from '@react-navigation/stack';\r\nimport DraggableFlatList, {RenderItemParams} from './DraggableFlatList'\r\n\r\nconst renderItem = ({ item, index, drag, isActive }:RenderItemParams<React.ReactNode>) => {\r\n    return (\r\n        <TouchableOpacity\r\n        style={{\r\n          backgroundColor: isActive ? \"red\" : \"white\",\r\n          marginRight: Platform.OS == 'web'? 0 : 5,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n        onLongPress={drag}\r\n      >\r\n        {item}\r\n    </TouchableOpacity>\r\n    )\r\n}\r\nconst renderItemUnsort = ({ item, index, drag, isActive }:RenderItemParams<React.ReactNode>) => {\r\n  return (\r\n    <View\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        marginRight: 0,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      {item}\r\n    </View>\r\n  )\r\n}\r\ntype Props = {\r\n  children: React.ReactNode,\r\n  scrollEnabled?: boolean, \r\n  sortEnabled?: boolean, \r\n  addTitle?: string, \r\n  addElement?:(data:React.ReactNode[])=>React.ReactNode,\r\n  dataCallback:(data:React.ReactNode[])=>void\r\n}\r\n\r\nexport default function DraggableFlatListMain(props:Props){\r\n    const headerHeight = useHeaderHeight();\r\n    let _data = React.Children.toArray(props.children)\r\n    let _sortEnabled = (props.sortEnabled === undefined ? true : props.sortEnabled)\r\n    return (<DraggableFlatList<React.ReactNode>\r\n        sortEnabled={_sortEnabled}\r\n        scrollEnabled={props.scrollEnabled}\r\n        height={Dimensions.get(\"window\").height - headerHeight}\r\n        data={_data}\r\n        dataCallback={props.dataCallback}\r\n        renderItem={_sortEnabled ? renderItem : renderItemUnsort}\r\n        keyExtractor={(item:React.ReactNode, index:number) => `main-draggable-item-${index}`}\r\n        addElement={props.addElement}\r\n        addTitle={props.addTitle}\r\n    />)\r\n}","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\r\nimport { Text, View } from '../components/Themed';\r\nimport { StyleSheet, TouchableOpacity, GestureResponderEvent } from 'react-native';\r\nimport EditScreenInfo from '../components/EditScreenInfo';\r\n\r\ntype SectionDummyParamList = {\r\n    title: string,\r\n    pressText1: string,\r\n    onPress1:(event: GestureResponderEvent)=>void,\r\n    path: string\r\n}\r\n\r\nexport default function SectionDummy(props:SectionDummyParamList){\r\n  return (\r\n        <View style={styles.container}>\r\n            <TouchableOpacity onPress={props.onPress1} style={styles.link}>\r\n            <Text style={styles.linkText}>{props.pressText1}</Text>\r\n            </TouchableOpacity>\r\n            <Text style={styles.title}>{props.title}</Text>\r\n            <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\r\n            <EditScreenInfo path={props.path} />\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    title: {\r\n      fontSize: 20,\r\n      fontWeight: 'bold',\r\n    },\r\n    separator: {\r\n      marginVertical: 30,\r\n      height: 1,\r\n      width: '80%',\r\n    },\r\n    link: {\r\n      marginTop: 15,\r\n      paddingVertical: 15,\r\n    },\r\n    linkText: {\r\n      fontSize: 14,\r\n      color: '#2e78b7',\r\n    },\r\n  });\r\n  ","/**\r\n * Learn more about createDrawerNavigator:\r\n * https://reactnavigation.org/docs/bottom-tab-navigator\r\n */\r\n\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { DrawerScreenProps, createDrawerNavigator } from '@react-navigation/drawer';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { ParamListBase, Route } from '@react-navigation/native'; \r\nimport * as React from 'react';\r\nimport { Button } from 'react-native';\r\n\r\nimport Colors from '../constants/Colors';\r\nimport useColorScheme from '../hooks/useColorScheme';\r\nimport TabOneScreen from '../screens/TabOneScreen';\r\nimport TabTwoScreen from '../screens/TabTwoScreen';\r\nimport { DrawerParamList, TabOneParamList, TabTwoParamList } from '../types';\r\n\r\nconst Drawer = createDrawerNavigator<DrawerParamList>();\r\n\r\nexport default function DrawerNavigator() {\r\n  const colorScheme = useColorScheme();\r\n  //  drawerActiveTintColor: Colors[colorScheme].tint\r\n  return (\r\n    <Drawer.Navigator\r\n      initialRouteName={initialRouteName}\r\n      screenOptions={{ }}\r\n      drawerContentOptions={{activeTintColor: Colors[colorScheme].tint }}\r\n    >\r\n      {Navigators}\r\n    </Drawer.Navigator>\r\n  );\r\n}\r\n\r\nfunction DrawerNavigatorGeneric<ParamList extends Record<string, object | undefined>>(drawerName:keyof DrawerParamList, name: keyof ParamList, component:React.ComponentType<any>, headerTitle:string){\r\n  return (\r\n    <Drawer.Screen\r\n      key={drawerName}\r\n      name={drawerName}\r\n      component={StackNavigatorGeneric<ParamList, typeof drawerName>(name, component, headerTitle)}\r\n      options={{\r\n        drawerIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\n// You can explore the built-in icon families and icons on the web at:\r\n// https://icons.expo.fyi/\r\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\r\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\r\n}\r\n\r\n// Each tab has its own navigation stack, you can read more about this pattern here:\r\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\r\nfunction StackNavigatorGeneric<ParamList extends Record<string, object | undefined>, RouteName extends keyof DrawerParamList>(name:keyof ParamList, component:React.ComponentType<any>, headerTitle:string){\r\n  const TabStack = createStackNavigator<ParamList>();\r\n  function TabNavigator({navigation}: DrawerScreenProps<DrawerParamList, RouteName>) {\r\n    return (\r\n      <TabStack.Navigator>\r\n        <TabStack.Screen\r\n          name={name}\r\n          component={component}\r\n          options={{\r\n            headerTitle: headerTitle,\r\n            headerLeft: () => (\r\n              <Button\r\n                onPress={() => navigation.openDrawer()}\r\n                title=\"Menu\"\r\n                color=\"#888\"\r\n              />\r\n            ),\r\n          }}\r\n        />\r\n      </TabStack.Navigator>\r\n    );\r\n  }\r\n  return TabNavigator\r\n\r\n}\r\nconst initialRouteName = \"TabOne\"\r\n\r\n\r\nconst Navigators = [\r\n  DrawerNavigatorGeneric<TabOneParamList>(\"TabOne\", \"TabOneScreen\", TabOneScreen, 'Tab One Title'),\r\n  DrawerNavigatorGeneric<TabTwoParamList>(\"TabTwo\", \"TabTwoScreen\", TabTwoScreen, 'Tab Two Title')\r\n]\r\n","import React, {useCallback, useRef} from 'react';\r\nimport { StackScreenProps } from '@react-navigation/stack';\r\nimport {  DrawerParamList } from '../types';\r\nimport DraggableFlatListMain from '../components/DraggableFlatListMain'\r\nimport SectionDummy from '../components/SectionDummy'\r\n\r\n\r\nexport default function TabOneScreen({\r\n  navigation\r\n}: StackScreenProps< DrawerParamList, 'TabOne'>) {\r\n  const ref= useRef<typeof DraggableFlatListMain>(null)\r\n  const addElement = useCallback((data:React.ReactNode[])=>{\r\n    return (\r\n     <SectionDummy\r\n        title={'Tab One' + (data.length + 1)}\r\n        pressText1='Go 2 screen!'\r\n        onPress1={() => {navigation.navigate('TabTwo')}}\r\n       path='/screens/TabOneScreen.tsx'\r\n      />)\r\n  },[])\r\n  const dataCallback = useCallback((data)=>{console.log('!')}, [])\r\n\r\n  const arr = []\r\n  for (let i=0;i<100;i++){\r\n    arr[i] = <SectionDummy\r\n    key={i}\r\n    title={'Tab One' + (i+1)}\r\n    pressText1='Go 2 screen!'\r\n    onPress1={() => {navigation.navigate('TabTwo')}}\r\n    path='/screens/TabOneScreen.tsx'\r\n  />\r\n  }\r\n  return (\r\n    <DraggableFlatListMain\r\n      addElement={addElement}\r\n      dataCallback={dataCallback}\r\n      addTitle=\"add\"\r\n    >\r\n      {arr}\r\n    </DraggableFlatListMain>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { StackScreenProps } from '@react-navigation/stack';\r\nimport {  DrawerParamList} from '../types';\r\nimport DraggableFlatListDummy from '../components/DraggableFlatListDummy'\r\nimport DraggableFlatListMain from '../components/DraggableFlatListMain'\r\nimport SectionDummy from '../components/SectionDummy'\r\n\r\nexport default function TabTwoScreen({\r\n  navigation\r\n}: StackScreenProps< DrawerParamList, 'TabOne'>) {\r\n  //return (<DraggableFlatListDummy/>)\r\n  return (\r\n    <DraggableFlatListMain \r\n      sortEnabled={false}\r\n      dataCallback={()=>{}}\r\n    >\r\n      <SectionDummy\r\n        title='Tab Two'\r\n        pressText1='Go 1 screen!'\r\n        onPress1={() => {navigation.navigate('TabOne')}}\r\n        path='/screens/TabTwoScreen.tsx'\r\n      />\r\n      <SectionDummy\r\n        title='Tab Two'\r\n        pressText1='Go 1 screen!'\r\n        onPress1={() => {navigation.navigate('TabOne')}}\r\n        path='/screens/TabTwoScreen.tsx'\r\n      />\r\n    </DraggableFlatListMain>\r\n  );\r\n}","/**\r\n * Learn more about deep linking with React Navigation\r\n * https://reactnavigation.org/docs/deep-linking\r\n * https://reactnavigation.org/docs/configuring-links\r\n */\r\n\r\nimport * as Linking from 'expo-linking';\r\nconst _package = require('../package.json')\r\n\r\nexport default {\r\n  prefixes: [Linking.makeUrl('/')],\r\n  config: {\r\n    screens: {\r\n      Root: {\r\n        path: _package.homepage.split('github.io/')[1],  //github repository name\r\n        screens: {\r\n          TabOne: {\r\n            screens: {\r\n              TabOneScreen: 'one',\r\n            },\r\n          },\r\n          TabTwo: {\r\n            screens: {\r\n              TabTwoScreen: 'two',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      NotFound: '*',\r\n    },\r\n  },\r\n};\r\n","/**\n * If you are not familiar with React Navigation, check out the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport DrawerNavigator from './DrawerNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={DrawerNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\r\nimport React from 'react';\r\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\r\nimport useCachedResources from './hooks/useCachedResources';\r\nimport useColorScheme from './hooks/useColorScheme';\r\nimport Navigation from './navigation';\r\nimport _ from 'lodash';\r\n\r\n(function(l) {\r\n  alert(l)\r\n  if (l !== undefined && l.search[1] === '/' ) {\r\n    var decoded = l.search.slice(1).split('&').map(function(s) { \r\n      return s.replace(/~and~/g, '&')\r\n    }).join('?');\r\n    window.history.replaceState(null, '',\r\n        l.pathname.slice(0, -1) + decoded + l.hash\r\n    );\r\n  }\r\n}(window.location))\r\n\r\nconst ignoreWarnings = ['ReactNativeFiberHostComponent'];\r\nconst _console = _.clone(console);\r\nconsole.warn = (message: string) => {\r\n    var warn = true;\r\n    ignoreWarnings.forEach((value)=>{\r\n        if (message.indexOf(value) <= -1) {\r\n            warn = false;\r\n        }\r\n    });\r\n    if (warn){\r\n        _console.warn(message);\r\n    }\r\n    else{\r\n        // console.log(message)\r\n    }\r\n};\r\n\r\nexport default function App() {\r\n  const isLoadingComplete = useCachedResources();\r\n  const colorScheme = useColorScheme();\r\n\r\n  if (!isLoadingComplete) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <SafeAreaProvider>\r\n        <Navigation colorScheme={colorScheme} />\r\n        <StatusBar />\r\n      </SafeAreaProvider>\r\n    );\r\n  }\r\n}\r\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}